//
//  AllWordsViewModel.swift
//  Thai-Dictionary
//
//  Created by Bandit Silachai on 7/12/23.
//

import SwiftUI
import AVFoundation

class AllWordsViewModel: ObservableObject {
    
    let thaiAlphabet: [Alphabet] = [
        Alphabet(icon: "üêì", character: "‡∏Å"),
        Alphabet(icon: "ü•ö", character: "‡∏Ç"),
        Alphabet(icon: "üçæ", character: "‡∏É"),
        Alphabet(icon: "üêÉ", character: "‡∏Ñ"),
        Alphabet(icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", character: "‡∏Ö"),
        Alphabet(icon: "üîî", character: "‡∏Ü"),
        Alphabet(icon: "üêç", character: "‡∏á"),
        Alphabet(icon: "üçõ", character: "‡∏à"),
        Alphabet(icon: "", character: "‡∏â"),
        Alphabet(icon: "üêò", character: "‡∏ä"),
        Alphabet(icon: "‚õìÔ∏è", character: "‡∏ã"),
        Alphabet(icon: "üå≥", character: "‡∏å"),
        Alphabet(icon: "üíÉ", character: "‡∏ç"),
        Alphabet(icon: "", character: "‡∏é"),
        Alphabet(icon: "", character: "‡∏è"),
        Alphabet(icon: "", character: "‡∏ê"),
        Alphabet(icon: "", character: "‡∏ë"),
        Alphabet(icon: "", character: "‡∏í"),
        Alphabet(icon: "", character: "‡∏ì"),
        Alphabet(icon: "", character: "‡∏î"),
        Alphabet(icon: "", character: "‡∏ï"),
        Alphabet(icon: "", character: "‡∏ñ"),
        Alphabet(icon: "", character: "‡∏ó"),
        Alphabet(icon: "", character: "‡∏ò"),
        Alphabet(icon: "", character: "‡∏ô"),
        Alphabet(icon: "", character: "‡∏ö"),
        Alphabet(icon: "", character: "‡∏õ"),
        Alphabet(icon: "", character: "‡∏ú"),
        Alphabet(icon: "", character: "‡∏ù"),
        Alphabet(icon: "", character: "‡∏û"),
        Alphabet(icon: "", character: "‡∏ü"),
        Alphabet(icon: "", character: "‡∏†"),
        Alphabet(icon: "", character: "‡∏°"),
        Alphabet(icon: "", character: "‡∏¢"),
        Alphabet(icon: "", character: "‡∏£"),
        Alphabet(icon: "", character: "‡∏•"),
        Alphabet(icon: "", character: "‡∏ß"),
        Alphabet(icon: "", character: "‡∏®"),
        Alphabet(icon: "", character: "‡∏©"),
        Alphabet(icon: "", character: "‡∏™"),
        Alphabet(icon: "", character: "‡∏´"),
        Alphabet(icon: "", character: "‡∏¨"),
        Alphabet(icon: "", character: "‡∏≠"),
        Alphabet(icon: "", character: "‡∏Æ")
    ]

    
    let popularLists = [
        "‡∏Å‡∏Å‡πÄ‡∏™‡∏≤",
        "‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå",
        "‡∏Å‡∏á‡∏ß‡∏≤‡∏ô",
        "‡∏Å‡∏ä-",
        "‡∏Å‡∏é‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏´‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥",
        "‡∏Å‡πâ‡∏ô‡∏Å‡∏ö",
    ]
    
    @Published var data: [WordElement]?
    @Published var wordByCharacter: WordByCharacter?
    
    func find(vocab: String) {
        
        guard let url = URL(string: "https://thai-dictionary-api.vercel.app/lookup") else {
            print("Invalid URL")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
        
        let bodyData = "keyword=\(vocab)".data(using: .utf8)
        request.httpBody = bodyData
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Error: \(error.localizedDescription)")
                return
            }
            

            
            if let data = data {
                do {
                    let decoder = JSONDecoder()
                    let vocabularyList = try decoder.decode([WordElement].self, from: data)
                    
                    DispatchQueue.main.async {
                        self.data = vocabularyList
                    }
                } catch {
                    print("Error decoding JSON: \(error.localizedDescription)")
                }
            }
        }.resume()
        
    }
    
    func findAll() {
        
    }
    
    func findByCharacter(character: String) {
        guard let url = URL(string: "https://thai-dictionary-api.vercel.app/character/\(character)") else {
            print("Invalid URL")
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("Error: \(error.localizedDescription)")
                return
            }
            
            if let data = data {
                do {
                    let decoder = JSONDecoder()
                    let words = try decoder.decode(WordByCharacter.self, from: data)
                    
                    DispatchQueue.main.async {
                        self.wordByCharacter = words
                        print(words)
                    }
                } catch {
                    print("Error decoding JSON: \(error.localizedDescription)")
                }
            }
            

        }
        .resume()
        
    }
    
    func speak(_ text: String) {
        let utterance = AVSpeechUtterance(string: text)
        utterance.voice = AVSpeechSynthesisVoice(language: "th-TH")
        utterance.rate = 0.4
        
        let synthesizer = AVSpeechSynthesizer()
        synthesizer.speak(utterance)

    }
}

